from abc import ABCMeta, abstractmethod

from cryptography.hazmat.backends.interfaces import HashBackend

class HashAlgorithm(metaclass=ABCMeta):
    digest_size: int
    name: str

class HashContext(metaclass=ABCMeta):
    algorithm: HashAlgorithm
    @abstractmethod
    def copy(self) -> HashContext: ...
    @abstractmethod
    def finalize(self) -> bytes: ...
    @abstractmethod
    def update(self, data: bytes) -> None: ...

class SHA1(HashAlgorithm): ...
class SHA256(HashAlgorithm): ...
class SHA384(HashAlgorithm): ...
class SHA512(HashAlgorithm): ...

class Hash:
    def __init__(self, algorithm: HashAlgorithm, backend: HashBackend): ...
    def copy(self) -> Hash: ...
    def finalize(self) -> bytes: ...
    def update(self, data: bytes) -> None: ...
